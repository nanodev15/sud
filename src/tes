/ See if there can be a subset of length k in this row
100	    n = sum(X(i,:)==0)
101	    kmax = ceil(n/2)
102	    if ( k > kmax ) then
103	      // There is no subset of length k, try next.
104	      continue
105	    end
106	    // Search for subsets in row i.
107	    // Assemble all candidates of the row.
108	    carray = sudoku_candidatesmerge ( X , C , L , 1 , i , [] , [1 9] )
109	    if ( carray == [] ) then
110	      // There are no possible subset in this row, go on to the next
111	      continue
112	    end
113	    if ( size(carray,"*") <= k ) then
114	      // There are less than k candidates in this row:
115	      // there cannot exist a subset here, try the next row.
116	      continue
117	    end
118	    // Get all possible combinations of k elements among
119	    // these candidates
120	    cmap = combine ( carray , k )
121	    nk = size(cmap,"r")
122	    // Search for each combinations in the row i
123	    for m = 1 : nk
124	      S = cmap(m,:)
125	      icols = []
126	      for c = 1 : 9
127	        if ( X(i,c) == 0 ) then
128	          if ( isAnyContained ( S , find(C(i,c,:)) ) ) then
129	            // This might be a subset: register it
130	            icols($+1) = c
131	            if ( size(icols,"*") > k ) then
132	              // There are already more than k cells containing the subset.
133	              break
134	            end
135	          end
136	        end
137	      end
138	      if ( size(icols,"*") <> k ) then
139	        // This subset is not represented in the row:
140	        // try next subset.
141	        continue
142	      end
143	      if ( k == 1 ) then
144	        // This is a hidden single.
145	        c = icols(1)
146	        if ( verbose ) then
147	          mprintf("Found hidden single in row at (%d,%d) as %d\n",i,c,S)
148	        end
149	        [ X , C , L ] = sudoku_confirmcell ( X , C , L , i , c , S , verbose )
150	        // Try next subset.
151	        continue
152	      end
153	      // This is a hidden subset: remove the other candidates
154	      // from these k cells.
155	      firstverb = %t
156	      for ik = 1 : k
157	        // Simplify the cell #ik
158	        c = icols(ik)
159	        // Remove each candidate which is different from the subset S.
160	        for v = find(C(i,c,:))
161	          if ( and(S<>v) ) then
162	            [ C , L ] = sudoku_candidateremove ( C , L , 4 , i , c , v )
163	            if ( verbose ) then
164	              if ( firstverb ) then
165	                mprintf("Found hidden subset {%s} in row %d at columns %s\n" , ..
166	                  strcat(string(S),","),i,strcat(string(icols)," "))
167	                firstverb = %f
168	              end
169	              mprintf("Removed other candidates %d in hidden subset at (%d,%d) (remaining %d candidates)\n",v,i,c,sum(L))
170	            end
171	          end
172	        end
173	      end
174	      if ( stopatfirst & sum(L) <> before ) then
175	        return
176	      end
177	    end
178	  end
